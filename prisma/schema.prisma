generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  username    String   @db.VarChar(100) @unique
  password    String
  number      String   @db.VarChar(100)
  email       String   @db.VarChar(100) @unique
  role        Role     @default(USER)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  profile     Profile?
  likes				PostLike[]
	
  trainerAppointments  Appointment[] @relation("TrainerAppointments")

  @@map("users")
}

model Profile {
  id          			String   @id @default(uuid())
	username					String   @unique
  address     			String
  phone       			String
  alunos      			Int
	posts							Post[]
  name        			String
  description 			String
  niche       			String
  followers   			Int
  rate        			Float
  avatar      			String
  createdAt   			DateTime	@default(now())
  updatedAt   			DateTime	@updatedAt
	formation					String?
	specialty					String?
	onlineService			String?
	presencialService String?

  user				User     @relation(fields: [username], references: [username])

  @@map("user_infos")
}

model Appointment {
  id           Int      @id @default(autoincrement())
  trainerId    String
  studentName  String
  workoutType  String
  location     String
  time         String   // HH:mm - pode ser validado na camada de aplicação
  date         DateTime @db.Timestamptz(3)
  duration     Int      // em minutos
  notes        String

  trainer      User     @relation("TrainerAppointments", fields: [trainerId], references: [id])
  @@map("appointments")
}

model Post {
  id         String     @id @default(uuid())
  profileId  String     @map("profile_id")
  caption    String?    @db.Text
  mediaUrl   String     @map("media_url")
  mediaType  MediaType  @map("media_type")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  profile    Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  likes      PostLike[]

  @@map("posts")
  @@index([profileId, createdAt])
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // cada user pode curtir 1x
  @@map("post_likes")
  @@index([postId])
  @@index([userId])
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Role {
  USER
  ADMIN
  TRAINER
}