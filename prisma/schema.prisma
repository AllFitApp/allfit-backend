generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String           @id @default(uuid())
  name                 String           @db.VarChar(100)
  username             String           @unique @db.VarChar(100)
  password             String
  number               String           @db.VarChar(100)
  email                String           @unique @db.VarChar(100)
  role                 Role             @default(USER)
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  pagarmeCustomerId    String?          @unique @map("pagarme_customer_id")
  cpf                  String
  addresses            Address?
  studentAppointments  Appointment[]    @relation("StudentAppointments")
  trainerAppointments  Appointment[]    @relation("TrainerAppointments")
  createdExercises     Exercise[]       @relation("TrainerExercises")
  orders               Order[]          @relation("CustomerOrders")
  trainerOrders        Order[]          @relation("TrainerOrders")
  plans                Plan[]
  likes                PostLike[]
  recipientInfo        RecipientInfo?
  savedCards           SavedCard[]
  singleWorkouts       SingleWorkout[]
  trainerSubscriptions Subscription[]   @relation("TrainerSubscriptions")
  subscriptions        Subscription[]   @relation("UserSubscriptions")
  trainerHorarios      TrainerHorarios?
  trainerTransactions  Transaction[]    @relation("TrainerTransactions")
  transactions         Transaction[]    @relation("UserTransactions")
  profile              Profile?
  wallet               Wallet?
  weeklyPlans          WeeklyPlan[]     @relation("StudentWeeklyPlans")
  trainerWeeklyPlans   WeeklyPlan[]     @relation("TrainerWeeklyPlans")
  createdWorkouts      WorkoutSession[] @relation("TrainerWorkouts")

  @@map("users")
}

model Profile {
  id                String   @id @default(uuid())
  address           String
  phone             String
  alunos            Int
  name              String
  description       String
  niche             String
  followers         Int
  rate              Float
  avatar            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  username          String   @unique
  formation         String?
  onlineService     String?
  presencialService String?
  specialty         String?
  marketImage       String?
  posts             Post[]
  user              User     @relation(fields: [username], references: [username], onDelete: Cascade)

  @@map("user_infos")
}

model Address {
  id               Int      @id @default(autoincrement())
  userId           String   @unique @map("user_id")
  street           String
  complementary    String?
  streetNumber     String   @map("street_number")
  neighborhood     String
  line_2           String?
  city             String
  state            String   @db.VarChar(2)
  country          String?
  zipCode          String   @map("zip_code")
  referencePoint   String?  @map("reference_point")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  pagarmeAddressId String?  @map("pagarme_address_id")

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipientInfo RecipientInfo[]

  @@map("addresses")
}

model RecipientInfo {
  id                     Int      @id @default(autoincrement())
  userId                 String   @unique @map("user_id")
  addressId              Int      @map("address_id")
  siteUrl                String?  @map("site_url")
  motherName             String?  @map("mother_name")
  birthdate              String
  monthlyIncome          Int?     @map("monthly_income")
  professionalOccupation String?  @map("professional_occupation")
  bankHolderName         String   @map("bank_holder_name")
  bankHolderType         String   @default("individual") @map("bank_holder_type")
  bankHolderDocument     String   @map("bank_holder_document")
  bank                   String
  branchNumber           String   @map("branch_number")
  branchCheckDigit       String   @map("branch_check_digit")
  accountNumber          String   @map("account_number")
  accountCheckDigit      String   @map("account_check_digit")
  accountType            String   @default("checking") @map("account_type")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  address                Address  @relation(fields: [addressId], references: [id])
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recipient_infos")
}

model PartnerGym {
  id                String   @id @default(uuid())
  name              String   @db.VarChar(200)
  street            String
  streetNumber      String   @map("street_number")
  neighborhood      String
  city              String
  state             String   @db.VarChar(2)
  zipCode           String   @map("zip_code")
  complementary     String?
  availableServices Json     @map("available_services") // Array de serviços disponíveis
  contactPhone      String?  @map("contact_phone")
  contactEmail      String?  @map("contact_email")
  contactWebsite    String?  @map("contact_website")
  photoUrl          String  @map("photo_url")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([city, state])
  @@index([isActive])
  @@index([name])
  @@map("partner_gyms")
}

model Appointment {
  id               String          @id @default(uuid())
  date             DateTime        @db.Timestamptz(3)
  notes            String
  planId           String?
  completedAt      DateTime?       @map("completed_at")
  createdAt        DateTime        @default(now()) @map("created_at")
  paidAt           DateTime?       @map("paid_at")
  paymentStatus    String          @default("pending")
  singleWorkoutId  Int?            @map("single_workout_id")
  status           String          @default("pending")
  studentId        String          @map("student_id")
  subscriptionId   String?         @map("subscription_id")
  trainerId        String          @map("trainer_id")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  location         Json
  acceptedAt       DateTime?       @map("accepted_at")
  rejectedAt       DateTime?       @map("rejected_at")
  workoutSessionId String?         @map("workout_session_id")
  duration         Int?
  plan             Plan?           @relation(fields: [planId], references: [id])
  singleWorkout    SingleWorkout?  @relation(fields: [singleWorkoutId], references: [id])
  student          User            @relation("StudentAppointments", fields: [studentId], references: [id], onDelete: Cascade)
  subscription     Subscription?   @relation(fields: [subscriptionId], references: [id])
  trainer          User            @relation("TrainerAppointments", fields: [trainerId], references: [id], onDelete: Cascade)
  workoutSession   WorkoutSession?

  @@index([trainerId])
  @@index([date])
  @@index([studentId])
  @@index([subscriptionId])
  @@index([singleWorkoutId])
  @@index([workoutSessionId])
  @@index([status])
  @@index([paymentStatus])
  @@map("appointments")
}

model Post {
  id        String     @id @default(uuid())
  profileId String     @map("profile_id")
  caption   String?
  mediaUrl  String     @map("media_url")
  mediaType MediaType  @map("media_type")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  likes     PostLike[]
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, createdAt])
  @@map("posts")
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@map("post_likes")
}

model TrainerHorarios {
  id                    Int      @id @default(autoincrement())
  trainerId             String   @unique
  horarios              Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  defaultLocationConfig Json?
  savedLocations        Json?
  trainer               User     @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@map("trainer_horarios")
}

model Exercise {
  id              String           @id @default(uuid())
  trainerId       String           @map("trainer_id")
  name            String
  description     String?
  series          Int
  rest            Int
  weight          Float?
  type            String?
  reps            Int?
  timing          Int?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  isCopy          Boolean?         @map("is_copy")
  imageUrl        String?          @map("image_url")
  trainer         User             @relation("TrainerExercises", fields: [trainerId], references: [id], onDelete: Cascade)
  workoutSessions WorkoutSession[] @relation("WorkoutExercises")

  @@index([trainerId])
  @@index([type])
  @@map("exercises")
}

model WorkoutSession {
  id            String       @id @default(uuid())
  trainerId     String       @map("trainer_id")
  name          String
  description   String?
  type          String?
  defaultRest   Int?         @map("rest_between_exercises")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  appointmentId String?      @unique @map("appointment_id")
  dayOfWeek     Int?         @map("day_of_week")
  order         Int?
  weeklyPlanId  String?      @map("weekly_plan_id")
  isCopy        Boolean?     @map("is_copy")
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  trainer       User         @relation("TrainerWorkouts", fields: [trainerId], references: [id], onDelete: Cascade)
  weeklyPlan    WeeklyPlan?  @relation(fields: [weeklyPlanId], references: [id])
  exercises     Exercise[]   @relation("WorkoutExercises")

  @@index([trainerId])
  @@index([type])
  @@index([appointmentId])
  @@index([weeklyPlanId])
  @@map("workouts")
}

model WeeklyPlan {
  id          String           @id @default(uuid())
  trainerId   String           @map("trainer_id")
  studentId   String?          @map("student_id")
  name        String
  description String?
  startDate   DateTime         @map("start_date")
  endDate     DateTime?        @map("end_date")
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  isCopy      Boolean?         @map("is_copy")
  student     User?            @relation("StudentWeeklyPlans", fields: [studentId], references: [id], onDelete: Cascade)
  trainer     User             @relation("TrainerWeeklyPlans", fields: [trainerId], references: [id], onDelete: Cascade)
  workouts    WorkoutSession[]

  @@index([trainerId, studentId])
  @@index([studentId, isActive])
  @@index([startDate, endDate])
  @@map("weekly_plans")
}

model Wallet {
  id              Int      @id @default(autoincrement())
  userId          String   @unique @map("user_id")
  pagarmeWalletId String?  @unique @map("pagarme_wallet_id")
  balance         Int      @default(0)
  lastSynced      DateTime @default(now()) @map("last_synced")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet")
}

model SavedCard {
  id             Int      @id @default(autoincrement())
  userId         String   @map("user_id")
  pagarmeCardId  String   @unique @map("pagarme_card_id")
  lastFour       String   @map("last_four")
  brand          String
  holderName     String   @map("holder_name")
  holderDocument String   @default("") @map("holder_document")
  expMonth       Int      @default(0) @map("exp_month")
  expYear        Int      @default(0) @map("exp_year")
  firstSixDigits String   @default("") @map("first_six_digits")
  status         String   @default("") @map("status")
  type           String
  isDefault      Boolean  @default(false) @map("is_default")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  type           String
  expMonth       Int      @default(0) @map("exp_month")
  expYear        Int      @default(0) @map("exp_year")
  firstSixDigits String   @default("") @map("first_six_digits")
  holderDocument String   @default("") @map("holder_document")
  status         String   @default("") @map("status")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_cards")
}

model Plan {
  id              String         @id @default(uuid())
  name            String
  description     String?
  price           Int
  features        Json?
  isActive        Boolean        @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  category        String?
  trainerUsername String         @map("trainer_username")
  trainerId       String         @map("trainer_id")
  pagarmePlanId   String         @unique @map("pagarme_plan_id")
  imageUrl        String?        @map("image_url")
  appointments    Appointment[]
  trainer         User           @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  subscriptions   Subscription[]

  @@index([trainerUsername, isActive, trainerId])
  @@map("plans")
}

model Subscription {
  id                    String             @id @default(uuid())
  userId                String             @map("user_id")
  trainerId             String             @map("trainer_id")
  planId                String             @map("plan_id")
  pagarmeSubscriptionId String             @unique @map("pagarme_subscription_id")
  status                SubscriptionStatus @default(ACTIVE)
  planPrice             Int                @map("plan_price")
  startDate             DateTime           @map("start_date")
  endDate               DateTime?          @map("end_date")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  appointments          Appointment[]
  plan                  Plan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  trainer               User               @relation("TrainerSubscriptions", fields: [trainerId], references: [id], onDelete: Cascade)
  user                  User               @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trainerId])
  @@index([status])
  @@map("subscriptions")
}

model SingleWorkout {
  id              Int           @id @default(autoincrement())
  trainerUsername String        @map("trainer_username")
  trainerId       String        @map("trainer_id")
  name            String
  description     String?
  category        String?
  price           Int
  duration        Int?
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  imageUrl        String?       @map("image_url")
  appointments    Appointment[]
  trainer         User          @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId, isActive])
  @@index([trainerUsername, isActive])
  @@index([category])
  @@map("single_workouts")
}

model Order {
  id             String   @id @default(uuid())
  customerId     String   @map("customer_id")
  trainerId      String   @map("trainer_id")
  orderNumber    String   @unique @map("order_number")
  totalAmount    Int      @map("total_amount")
  status         String
  paymentMethod  String?  @map("payment_method")
  pagarmeOrderId String?  @unique @map("pagarme_order_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  customer       User     @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade)
  trainer        User     @relation("TrainerOrders", fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([trainerId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Transaction {
  id            Int             @id @default(autoincrement())
  userId        String?         @map("user_id")
  trainerId     String?         @map("trainer_id")
  orderId       String?         @map("order_id")
  transferId    String?         @map("transfer_id")
  amount        Int
  type          TransactionType
  paymentMethod String?         @map("payment_method")
  description   String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  status        String?
  trainer       User?           @relation("TrainerTransactions", fields: [trainerId], references: [id])
  user          User?           @relation("UserTransactions", fields: [userId], references: [id])

  @@index([userId])
  @@index([trainerId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

model partner_gyms {
  id                 String   @id
  name               String   @db.VarChar(200)
  street             String
  street_number      String
  neighborhood       String
  city               String
  state              String   @db.VarChar(2)
  zip_code           String
  complementary      String?
  available_services Json
  contact_phone      String?
  contact_email      String?
  contact_website    String?
  photo_url          String
  is_active          Boolean  @default(true)
  created_at         DateTime @default(now())
  updated_at         DateTime

  @@index([city, state])
  @@index([is_active])
  @@index([name])
}

model Feedback {
  id         String   @id @default(uuid())
  name       String
  email      String
  experience String
  liked      String
  disliked   String
  bug        String
  navigation String
  recommend  String
  suggestion String
  features   Json
  usability  Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("feedbacks")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Role {
  USER
  ADMIN
  TRAINER
}

enum TransactionType {
  PAYMENT
  WITHDRAWAL
  REFUND
  FEE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}
